{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form",
  "type": "registry:component",
  "title": "form",
  "description": "form component.",
  "dependencies": [
    "react-hook-form",
    "@radix-ui/react-label"
  ],
  "registryDependencies": [
    "https://mieru.wisp.bio/r/styles-abstraction.json",
    "https://mieru.wisp.bio/r/label.json"
  ],
  "files": [
    {
      "path": "src/components/ui/form.tsx",
      "content": "'use client'\nimport type * as LabelPrimitive from '@radix-ui/react-label'\nimport type { ComponentProps } from 'react'\nimport type { ControllerProps, FieldPath, FieldValues } from 'react-hook-form'\nimport { Label } from '@/components/ui/label'\nimport { cn } from '@/lib/utils'\nimport { Slot } from '@radix-ui/react-slot'\nimport { createContext, useContext, useId, useMemo } from 'react'\nimport { Controller, FormProvider, useFormContext, useFormState } from 'react-hook-form'\n\nconst Form = FormProvider\n\ninterface FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> {\n  name: TName\n}\n\nconst FormFieldContext = createContext<FormFieldContextValue>({\n} as FormFieldContextValue)\n\nconst FormItemContext = createContext<FormItemContextValue>({\n} as FormItemContextValue)\n\nfunction FormField<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({ ...props }: ControllerProps<TFieldValues, TName>) {\n  const value = useMemo(\n    () => ({\n      name: props.name,\n    }),\n    [props.name],\n  )\n\n  return (\n    <FormFieldContext value={value}>\n      <Controller {...props} />\n    </FormFieldContext>\n  )\n}\n\nfunction useFormField() {\n  const fieldContext = useContext(FormFieldContext)\n  const itemContext = useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({\n    name: fieldContext.name,\n  })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ninterface FormItemContextValue {\n  id: string\n}\n\nfunction FormItem({ className, ...props }: ComponentProps<'div'>) {\n  const id = useId()\n\n  const value = useMemo(\n    () => ({\n      id,\n    }),\n    [id],\n  )\n\n  return (\n    <FormItemContext value={value}>\n      <div\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        {...props}\n      />\n    </FormItemContext>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive-foreground', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId }\n    = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? '') : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive-foreground text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  useFormField,\n}\n",
      "type": "registry:component"
    }
  ]
}