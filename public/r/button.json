{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "button",
  "description": "button component.",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "https://mieru.wisp.bio/r/styles-abstraction.json",
    "https://mieru.wisp.bio/r/spinner.json"
  ],
  "files": [
    {
      "path": "src/components/ui/button.tsx",
      "content": "import type { VariantProps } from 'class-variance-authority'\nimport type { ComponentProps } from 'react'\nimport { interactiveStyles } from '@/lib/styles'\nimport { cn } from '@/lib/utils'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva } from 'class-variance-authority'\nimport { Spinner } from './spinner'\n\nconst buttonVariants = cva(\n  `${interactiveStyles.base} relative inline-flex items-center justify-center`,\n  {\n    variants: {\n      variant: {\n        default: interactiveStyles.variant.default,\n        destructive: interactiveStyles.variant.destructive,\n        outline: interactiveStyles.variant.outline,\n        ghost: interactiveStyles.variant.ghost,\n        link: interactiveStyles.variant.link,\n      },\n      size: {\n        default: interactiveStyles.size.default,\n        sm: interactiveStyles.size.sm,\n        lg: interactiveStyles.size.lg,\n        icon: interactiveStyles.size.icon,\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  children,\n  variant,\n  size,\n  asChild = false,\n  isLoading = false,\n  disabled = false,\n  ...props\n}: ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n    isLoading?: boolean\n    disabled?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      disabled={disabled || isLoading}\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          className,\n        }),\n        isLoading && 'grid text-transparent [grid-template-areas:stack]',\n        disabled && 'pointer-events-none',\n      )}\n      {...props}\n    >\n      {children}\n      {isLoading && (\n        <span className=\"absolute inset-0 grid place-items-center\">\n          <Spinner className=\"size-6\" />\n        </span>\n      )}\n    </Comp>\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:component"
    }
  ]
}