{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:component",
  "title": "carousel",
  "description": "carousel component.",
  "dependencies": [
    "@iconify/react",
    "embla-carousel-react"
  ],
  "registryDependencies": [
    "https://mieru.wisp.bio/r/styles-abstraction.json",
    "https://mieru.wisp.bio/r/button.json"
  ],
  "files": [
    {
      "path": "src/components/ui/carousel.tsx",
      "content": "'use client'\nimport type { UseEmblaCarouselType } from 'embla-carousel-react'\nimport type { ComponentProps, KeyboardEvent } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport { Icon } from '@iconify/react'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ninterface CarouselProps {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: ComponentProps<'div'> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  )\n  const [canScrollPrev, setCanScrollPrev] = useState(false)\n  const [canScrollNext, setCanScrollNext] = useState(false)\n\n  const onSelect = useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      }\n      else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext],\n  )\n\n  useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  const value = useMemo(() => ({\n    carouselRef,\n    api,\n    opts,\n    orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n    scrollPrev,\n    scrollNext,\n    canScrollPrev,\n    canScrollNext,\n  }), [carouselRef, api, opts, orientation, scrollPrev, scrollNext, canScrollPrev, canScrollNext])\n\n  return (\n    <CarouselContext value={value}>\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: ComponentProps<'div'>) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn('flex', orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col', className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: ComponentProps<'div'>) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn('min-w-0 shrink-0 grow-0 basis-full', orientation === 'horizontal' ? 'pl-4' : 'pt-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = 'default',\n  size = 'icon',\n  ...props\n}: ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn('absolute size-8', orientation === 'horizontal' ? 'top-1/2 -left-12 -translate-y-1/2' : '-top-12 left-1/2 -translate-x-1/2 rotate-90', className)}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <Icon\n        icon=\"ph:arrow-left\"\n        className=\"size-4\"\n      />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = 'default',\n  size = 'icon',\n  ...props\n}: ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn('absolute size-8', orientation === 'horizontal' ? 'top-1/2 -right-12 -translate-y-1/2' : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90', className)}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <Icon\n        icon=\"ph:arrow-right\"\n        className=\"size-4\"\n      />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  Carousel,\n  type CarouselApi,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n}\n",
      "type": "registry:component"
    }
  ]
}